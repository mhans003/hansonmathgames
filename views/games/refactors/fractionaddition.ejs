<html>
    
    <head>
        
        <meta charset="utf-8">
        
        <%- include("../../partials/sharedstyles") %>
        
        <style>
            
            .correctAnswer {
                position: relative; 
                -webkit-animation-name: example; /* Safari 4.0 - 8.0 */
                -webkit-animation-duration: 2s; /* Safari 4.0 - 8.0 */
                animation-name: correct;
                animation-duration: 2s;
            }
            
            .incorrectAnswer {
                position: relative; 
                -webkit-animation-name: example; /* Safari 4.0 - 8.0 */
                -webkit-animation-duration: 2s; /* Safari 4.0 - 8.0 */
                animation-name: incorrect;
                animation-duration: 2s;
            }
            
            #score {
                font-size: 1.2em; 
            }
            
            #popup {
                font-size: 2.5em;
                color: rgba(230,230,255,0.15);
            }
			
			#problemContainer {
                font-size: 2.5em;
            }
            
            @-webkit-keyframes correct {
                0%   {color:rgba(80,255,150,0.6); font-size: 1em; width: 200px; margin: auto; left:0px; top: 110px;}
          
                90% {color:rgba(80,255,150,0.6); font-size: 1em; width: 200px; margin: auto; left:0px; top:0px;}
                
                100% {color: rgba(80, 255, 150, 0.6); display: none; font-size: 1em; margin: auto; width: 200px;}
            }
          
            @keyframes correct {
              0%   {color:rgba(80,255,150,0.6); font-size: 1em; width: 200px; margin: auto; left:0px; top:110px;}
      
              90% {color:rgba(80,255,150,0.6); font-size: 1em; width: 200px; margin: auto; left:0px; top:0px;}
                
              100% {color: rgba(80, 255, 150, 0.6); display: none; font-size: 1em; margin: auto; width: 200px;}
            }
            
            @-webkit-keyframes incorrect {
                0%   {color:rgba(255,80,50,0.6); font-size: 1em; width: 200px; margin: auto; left:0px; top:110px;}
          
                90% {color:rgba(255,80,50,0.6); font-size: 1em; width: 200px; margin: auto; left:0px; top:0px;}
                
                100% {color:rgba(255,80,50,0.6); display: none; font-size: 1em; margin: auto; width: 200px;}
            }
          
            @keyframes incorrect {
              0%   {color:rgba(255,80,50,0.6); font-size: 1em; width: 200px; margin: auto; left:0px; top:110px;}
      
              90% {color:rgba(255,80,50,0.6); font-size: 1em; width: 200px; margin: auto; left:0px; top:0px;}
                
              100% {color:rgba(255,80,50,0.6); display: none; font-size: 1em; margin: auto; width: 200px;}
            }
        
        </style>
    
    </head>
    
    <title>Hanson Fraction Addition Fact Game</title>
    
    <body>
		
		<%- include("../../partials/navbaronly") %>
        
        <div class="container">
        
            <h1>Hanson Fraction Addition Game</h1>
            <hr>
			
			<%- include ("../../partials/highscores.ejs") %>
			
			<%- include ("../../partials/scoreform.ejs") %>
			
			<%- include ("../../partials/instructions/fractionaddition.ejs") %>
			
			<div id="timer"></div>
			
            <!--<input type='submit' value='START' class='startGame'>-->
            <button type="button" class="btn btn-primary" id="startGame">START <i class="fas fa-play-circle"></i></button>
            <br>
            <!--<input type='submit' value='RESET' class='resetGame'>-->
            <button type="button" class="btn btn-primary" id="resetGame">RESET <i class="fas fa-undo-alt"></i></button>
            <br>
            <br> 
			
            <div id='problemContainer'>
                
            </div>
            
            <div class='answerContainer' id='answerContainer'>
				
                <br>
                <div id = 'popup'> </div>
                <br>
                <h3>Answer</h3>
                
                <input id='answer' type='text' placeholder=''>
                
            </div>
            
            <br>
            
            <div class>
                
                <p id='score'>Current Score: </p>
            
                <h3>Problems to Practice:</h3>
                <p id='showAnswer'></p>
				
            </div>
			
			<!--include "../../partials/showpracticeproblems.ejs" here-->
            
        </div>
        
    </body>
	
    <script> 
		
		//VARIABLES
        
		let gameName = "Hanson Fraction Addition Game"; 
        
		const scoreVar = document.querySelector('#score'); 
		const continueVar = document.querySelector('#answer');
        const startGameVar = document.querySelector('#startGame');
        const resetGameVar = document.querySelector('#resetGame');
        const showAnswerVar = document.querySelector('#showAnswer'); 
		const submitScoreVar = document.querySelector('#submitScore'); 
        const problemContainerVar = document.querySelector('#problemContainer'); 
		//const showPracticeProblemsVar = document.querySelector('#showPracticeProblems'); 
		
		let timerVar = document.querySelector("#timer"); 
		
		//GAME SPECIFIC
		
		let answers = []; 
		let scoreAmount = 0;
		let answerString = '';  
		
		class Fraction {
			constructor(num,den) {
				this.num = num; 
				this.den = den; 
				this.htmlString = num + '&frasl;' + den; 
				this.string = num + '/' + den; 
				this.mixedOutput = this.htmlString; 
				//this.mixedOutputStripped = this.mixedOutput; 
				this.isWhole = (num % den === 0); 
				if(this.isWhole)
					{
						this.whole = num / den; 
						this.wholeString = String(this.whole); 
						this.mixedOutput = this.htmlString + ' or ' + this.whole; 
						//this.mixedOutputStripped = this.mixedOutput; 
					}
				this.isMixed = ((num / den >= 1) && (num % den !== 0)); 
				if(this.isMixed) 
					{
						this.mixedHtml = parseInt(num / den) + ' ' + (num % den) + '&frasl;' + den; 
						this.mixedString = parseInt(num / den) + ' ' + (num % den) + '/' + den; 
						this.mixedStringNoSpaces = parseInt(num / den) + String(num % den) + '/' + String(den); 
						this.mixedOutput = this.htmlString + ' or ' + this.mixedHtml; 
						//this.mixedOutputStripped = this.mixedStringNoSpaces; 
					}
			}
		}
        
        //EVENTS
        
        startGameVar.addEventListener('click', startGame);
        resetGameVar.addEventListener('click', resetGame);
        continueVar.addEventListener('keydown', function(event) {
            if(event.keyCode === 13 && startGameVar.disabled == true) {
                checkAnswer(); 
            }
            
        });
		
		//INITIALIZE
		setUp(); 
        
        //FUNCTIONS
		
		function setUp() {
			
			resetOff();
			continueOff(); 
			problemContainerOff(); 
			
			timerVar.style.display = "none"; 
			submitScoreVar.style.display = 'none'; 
			//showPracticeProblemsVar.style.display = 'none'; 
			
		}
        
        function startGame() {
            
			startOff(); 
			resetOff(); 
			continueOn(); 
			problemContainerOn(); 
			
			setUpTimer();
			
            createProblem(); 
			
        }
		
		function timeout() {
			
			endTimer(); 
			
			//alert('Time\'s Up!');
			
			resetOn();
			continueOff(); 
			
			problemContainerVar.style.color = 'green';
			//showPracticeProblemsVar.style.display = 'block'; 
			problemContainerVar.innerHTML = 'Final Score: ' + finalScore; 
            
			//create new score 
			
			if(finalScore > document.querySelector('.lowestHighScore').value || 
			   finalScore > document.querySelector('.usershighscore').value)
				{
					createNewScore(); 
				}
			
			
			//populate problems
			//populatePracticeProblems(); 

		}
        
        function resetGame() {
             
			//problemList = []; 
			
       		startOn(); 
			resetOff(); 
			clearTimer(); 
			continueOff(); 
			resetVariables();
			problemContainerOff(); 
			//createPracticeProblemsButton(); 
			
			continueVar.value = ''; 
			showAnswerVar.innerHTML = ''; 
			problemContainerVar.innerHTML = ''; 
			submitScoreVar.style.display = 'none'; 
			scoreVar.innerHTML = 'Current Score: '; 
			problemContainerVar.style.color = 'black'; 
			//showPracticeProblemsVar.style.display = 'none';
			continueVar.style.backgroundColor = 'rgba(255,255,255,1)';
			
			answers = []; 

        }
        
        function createProblem() {
			
			answers = []; //clear previous answers
            
            let den1 = Math.floor(Math.random() * 4 + 2);
			let den2 = den1 * Math.floor(Math.random() * 4 + 2); 
			
			let num1 = Math.floor(Math.random() * den1 + 1); 
			let num2 = Math.floor(Math.random() * den2 + 1); 
			
			scoreAmount = num1 + num2 + den1 + den2; 
			
			problem = num1 + '&frasl;' + den1 + ' + ' + num2 + '&frasl;' + den2;
			
			getAnswers(num1,den1,num2,den2); 
			
            //problem = addend1 + ' + ' + addend2; 
            //answer = addend1 + addend2;
       
			problemContainerVar.innerHTML = problem; 
			console.log(problem); 
			console.log(answers); 
			//console.log(answerString); 
            
        }
		
		function getAnswers(num1, den1, num2, den2) {
			
			//change logic for non-related denominators 
			let answerNum = (num1 * (den2/den1)) + num2; 
			let answerDen = den2; 
			
			//answer = answerNum / den2; 
			//answerString = answerNum + '&frasl;' + den2; 
			//answers.push(answerString); 
			
			for(let i = answerNum; i > 0; i--) //check to see if answer can simplify 
				{
					if((answerNum % i === 0) && (den2 % i === 0))
						{
							let thisNum = answerNum / i; 
							let thisDen = den2 / i; 
							let thisFraction = new Fraction(thisNum,thisDen); 
							answers.push(thisFraction); 
							//let thisFraction = thisNum + '&frasl;' + thisDen; 
							//answers.push(thisFraction); 
						}
				}
			
		}
        
        function checkAnswer() {
            
			let isCorrect = false; 
			
            let userInput = String(continueVar.value);
			let userInputStripped = userInput.replace(/\s+/g, '');
			
			for(let i = 0; i < answers.length; i++) //check input against all answers
				{
					if(userInputStripped === answers[i].string ||
					   userInputStripped === answers[i].wholeString ||
					   userInputStripped === answers[i].mixedStringNoSpaces)
						{
							isCorrect = true;
							break; 
						}
				}
			
            if(isCorrect)
            {
                //if(answer === 0 && continueVar.value === '')
				if(userInputStripped === '')
                {
					wrongAnswer(scoreAmount);
					document.getElementById('showAnswer').innerHTML += 
						problem + ' = ' + answers[answers.length - 1].mixedOutput + '<br>';
                }
                else
                {
					correctAnswer(scoreAmount); 
                }
            }
            else
            {
				wrongAnswer(scoreAmount); 
				document.getElementById('showAnswer').innerHTML 
					+= problem + ' = ' + answers[answers.length - 1].mixedOutput + '<br>';
            }
       		
			showCurrentScore(); 
            
            continueVar.value = ''; 
            createProblem();
            
        }
        
    </script>
    
</html>