<html>
    
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js"></script>
    
    <head>
		
		<%- include("../partials/bootstrap") %>
        
        <meta charset="utf-8">
		
		<%- include("../partials/sharedstyles") %>
        
        <style>
            .correctAnswer {
                position: relative; 
                -webkit-animation-name: example; /* Safari 4.0 - 8.0 */
                -webkit-animation-duration: 2s; /* Safari 4.0 - 8.0 */
                animation-name: correct;
                animation-duration: 2s;
            }
            
            .incorrectAnswer {
                position: relative; 
                -webkit-animation-name: example; /* Safari 4.0 - 8.0 */
                -webkit-animation-duration: 2s; /* Safari 4.0 - 8.0 */
                animation-name: incorrect;
                animation-duration: 2s;
            }
            
            #score {
                font-size: 1.2em; 
            }
            
            #popup {
                font-size: 2.5em;
                color: rgba(255,255,255,1);
            }
            
            @-webkit-keyframes correct {
                0%   {color:rgba(80,255,150,0.6); font-size: 1em; width: 200px; margin: auto; left:0px; top: -100px;}
          
                90% {color:rgba(80,255,150,0.6); font-size: 1em; width: 200px; margin: auto; left:0px; top:0px;}
                
                100% {color: rgba(80, 255, 150, 0.6); display: none; font-size: 1em; margin: auto; width: 200px;}
            }
          
            @keyframes correct {
              0%   {color:rgba(80,255,150,0.6); font-size: 1em; width: 200px; margin: auto; left:0px; top:-100px;}
      
              90% {color:rgba(80,255,150,0.6); font-size: 1em; width: 200px; margin: auto; left:0px; top:0px;}
                
              100% {color: rgba(80, 255, 150, 0.6); display: none; font-size: 1em; margin: auto; width: 200px;}
            }
            
            @-webkit-keyframes incorrect {
                0%   {color:rgba(255,80,50,0.6); font-size: 1em; width: 200px; margin: auto; left:0px; top:-90px;}
          
                90% {color:rgba(255,80,50,0.6); font-size: 1em; width: 200px; margin: auto; left:0px; top:0px;}
                
                100% {color:rgba(255,80,50,0.6); display: none; font-size: 1em; margin: auto; width: 200px;}
            }
          
            @keyframes incorrect {
              0%   {color:rgba(255,80,50,0.6); font-size: 1em; width: 200px; margin: auto; left:0px; top:-90px;}
      
              90% {color:rgba(255,80,50,0.6); font-size: 1em; width: 200px; margin: auto; left:0px; top:0px;}
                
              100% {color:rgba(255,80,50,0.6); display: none; font-size: 1em; margin: auto; width: 200px;}
            }
        </style>
    
    </head>
    
    <title>Preparing for Long Division</title>
    
    <body>
		
		<%- include("../partials/navbaronly") %>
    
        <h1>Preparing for Long Division</h1>
        <h2>Understanding Division and Remainders</h2>
		<hr>
		
		<%- include ("../partials/highscores.ejs") %>
		
		<div class="container">
			
			<p id='problem' class='problem'></p>
        
			<div class='inputContainer' ng-app="labelApp" ng-controller="labelCtrl">
				<div>
					<span id='quotientLabel' class='quotientLabel'></span>
					<input id='quotientInput' class='quotientInput' type='number' placeholder='' ng-model="quot" ng-keydown="keyPress($event)">
					<br>
					<br>
				</div>
				
				<div>
					<span id='remainderLabel' class='remainderLabel'></span>
					<input id='remainderInput' class='remainderInput' type='number' placeholder='' ng-model="rem" ng-keydown="keyPress($event)"> 
					<br>
					<br>
				</div>
				
				<div id = 'popup'> </div>

				<span id='outputSentence' class='outputSentence'>( {{quot}} ) times with a remainder of ( {{rem}} )</span>
				<br>
				<br>

				<button type="button" class="btn btn-primary check">CHECK</button>
				<br>

				<button type="button" class="btn btn-primary resetGame">RESET <i class="fas fa-undo-alt"></i></button>
				<br>
				<br>

			</div>

			<div class="container scoreform" id="submitscore">
					<div class='row justify-content-center'>
						<div class="col-xsm-4">
							<form class='form-signin' action='/games/submit' method='POST'>
								<h1 class='h3 credentialsheading mb-3 font-weight-normal'>Submit Score</h1>
								<div class='form-group'>
									<label for='inputUsername' class='sr-only'>Username</label>
									<input type='text' id='inputUsername' class='form-control' name='username' value=<%= currentUser.username %> readonly>
								</div>
								<div class='form-group'>
									<label for='inputGame' class='sr-only'>Game</label>
									<input type='text' id='inputGame' class='form-control' name='game' value='Hanson Preparing for Long Division Game' readonly>
								</div>
								<div class='form-group'>
									<label for='inputScore' class='sr-only'>Score</label>
									<input type='number' id='inputScore' class='form-control' name='score' readonly>
								</div>
								<div class='form-group'>
									<button class='btn btn-lg btn-primary btn-block' type='submit'>Submit Score</button>
								</div>
							</form>
						</div>
					</div>
				</div>

			<button type="button" class="btn btn-primary startGame">START <i class="fas fa-play-circle"></i></button>
			<br>

			<p id='score' class='score'></p>
			<p id='incorrect' class='incorrect'></p>
			
		</div>
        
    </body>
    
    <script>
        
        //Angular module
        
        let app = angular.module('labelApp', []);
        app.controller('labelCtrl', function($scope) {
            $scope.quot = null;
            $scope.rem = null;
            $scope.resetValues = function() {
                $scope.quot = null;
                $scope.rem = null;
            };
            $scope.keyPress = function(keyEvent) {
                if (keyEvent.which === 13)
                {
                    //$scope.resetValues();
                    $scope.quot = null;
                    $scope.rem = null;
                    console.log('Angular keyevent');
                }
            };
        }); 
        
        //Plain JS
        
        const startGameVar = document.querySelector('.startGame');
        const resetGameVar = document.querySelector('.resetGame');
        const continueVar = document.querySelector('.check');
        const quotientInputVar = document.querySelector('.quotientInput');
        const remainderInputVar = document.querySelector('.remainderInput');
        const inputContainerVar = document.querySelector('.inputContainer'); 
        
        let score = 0;
        let quotient = 0;
        let remainder = 0; 
        let problem = '';
        let answer = ''; 
        
        //game start conditions
        resetGameVar.disabled = true;
        resetGameVar.style.display = 'none';
        continueVar.style.display = 'none'; 
        continueVar.disabled = true; //make ability to check answer disabled until start of game
        inputContainerVar.style.display = 'none'; 
		document.getElementById("submitscore").style.display = "none"; 
        
        //events 
        startGameVar.addEventListener('click', startGame);
        resetGameVar.addEventListener('click', resetGame);
        continueVar.addEventListener('click', checkAnswer);

        quotientInputVar.addEventListener('keydown', function(event) {
            if(event.keyCode === 13 && startGameVar.disabled == true) {
                checkAnswer();
                console.log('Normal Javascript keyevent'); 
            }
        });
        remainderInputVar.addEventListener('keydown', function(event) {
            if(event.keyCode === 13 && startGameVar.disabled == true) {
                checkAnswer();
                console.log('Normal Javascript keyevent'); 
            }
        });
        
        //functions
        
        function startGame() {
            
            startGameVar.disabled = true;
            startGameVar.style.display = 'none';           
            continueVar.style.display = 'none'; 
            continueVar.disabled = false; //make ability to check answer disabled until start of game
            inputContainerVar.style.display = 'initial';
            
            quotientInputVar.disabled = false;
            remainderInputVar.disabled = false;
            
            quotientInputVar.focus(); 
            
            document.getElementById('score').innerHTML = 'Problems Correct: '; 
            
            setTimeout(timeout, 6000);
            
            createProblem();
            
        }
		
		function timeout() {
			
			//end game conditions
            alert('Time\s Up!');
            document.querySelector('body').style.backgroundColor = '#ffffff';
            continueVar.disabled = true;
            resetGameVar.disabled = false;
            resetGameVar.style.display = 'initial';
            quotientInputVar.disabled = true;
            remainderInputVar.disabled = true; 
			document.getElementById("submitscore").style.display = "block"; 
			document.getElementById("inputScore").value = score; 
            document.querySelector('.score').style.color = 'green';
			
		}
        
        function createProblem() {
            
            //create values
            let randomDivisor = Math.floor(Math.random() * 8 + 2);
            console.log('Random Divisor:' + randomDivisor);
            
            let randomMultiplier = Math.floor(Math.random() * 8 + 2);
            console.log('Random Multiplier:' + randomMultiplier);
            quotient = randomMultiplier; //store global quotient
            
            let randomRemainder = Math.floor(Math.random() * randomDivisor);
            console.log('RandomRemainder:' + randomRemainder);
            remainder = randomRemainder; //store global remainder
            
            let dividend = (randomDivisor * randomMultiplier) + randomRemainder;
            
            problem = 'How many times does ' + randomDivisor + ' go into ' + dividend + ' without going over?'; //store global problem
            answer = randomDivisor + ' goes into ' + dividend + ' ' + '<span style="text-decoration:underline;">' + quotient +
            '</span>' + ' times with a remainder of ' + '<span style="text-decoration:underline;">' + remainder + '</span>' +
            '<br>' + '(' + randomDivisor + ' x ' + '<span style="text-decoration:underline;">' + quotient + '</span>' + ' = ' + (randomDivisor * quotient) + ';   ' +
            (randomDivisor * quotient) + ' + ' + '<span style="text-decoration:underline;">' + remainder + '</span>' + ' = ' + dividend + ')' + '<br>'; //store global answer
            
            document.getElementById('problem').innerHTML = problem; //output problem
            document.getElementById('quotientLabel').innerHTML = 'Quotient: ';
            document.getElementById('remainderLabel').innerHTML = 'Remainder: '; 
            
        }
        
        function checkAnswer() {
            
            let quotientInput = Number(quotientInputVar.value);
            let remainderInput = Number(remainderInputVar.value);
            
            if(quotientInput === quotient && remainderInput === remainder)
            {
				document.getElementById('popup').innerHTML = '<div class="correctAnswer"><i class="fas fa-thumbs-up"></i>' + '</div>';
                score += 1; 
            }
            else
            {
                document.getElementById('popup').innerHTML = '<div class="incorrectAnswer"><i class="fas fa-thumbs-down"></i>' + '</div>';
                document.getElementById('incorrect').innerHTML += answer + '<br>'; 
            }
    
            document.getElementById('score').innerHTML = 'Problems Correct: ' + score;
            
            //quotientInputVar.value = '';
            //remainderInputVar.value = '';
            
            quotientInputVar.focus(); 
            
            createProblem(); 
            
        }
        
        function resetGame() {
			
			score = 0;
			quotient = 0;
			remainder = 0; 
			problem = '';
			answer = ''; 
            
            resetGameVar.disabled = true;
            resetGameVar.style.display = 'none'; 
            
            startGameVar.disabled = false;
            startGameVar.style.display = 'initial';
            
            inputContainerVar.style.display = 'none'; 
            
            document.querySelector('.score').style.color = 'black';
            document.getElementById('score').innerHTML = '';
            
            document.getElementById('incorrect').innerHTML = '';
            document.getElementById('problem').innerHTML = '';
			
			document.getElementById("submitscore").style.display = "none"; 
            
            continueVar.style.display = 'none'; 
        	continueVar.disabled = true; //make ability to check answer disabled until start of game
            
        }
        
    </script>
    
</html>